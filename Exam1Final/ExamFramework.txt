+-*/ left associative
^ right associative

*/ have higher precedence than +-
^ has higher prededence than */



Calculator will take mixed variables.
Calculator will read in line and parse.
Using stack, pop off each element:


string expression = line.top();


stack<mixed> numberStack;
stack<char> operatorStack;
stack<string> outputStack;


If parentheses, push as is.


if ( (pos=expression.find_first_of("0123456789",0) > 0 ) // Push if number
{
	1. Get line
	2. Convert to mixed. This means sterilize; read one character at a time. When you hit space, put into whole. If you hit "/" put into frac.
	3. Return mixed.
	4. Push onto output stack.
	5. Push onto number stack, await instructions.	


}
if ( pos=expression.find_first_of("+-",0) > 0)
	operatorStack.push_back((substr(pos,expression.size());
{
	1. Get op
	2. Check if stack has */
	3. If yes, pop */, push onto output, pop number = b, pop another number = a, a op b = c, push c to number stack.
	4. Push op onto operator stack
	5. Await instructions
}

if ( pos = expression.find_first_of("*/",0) > 0)
{	
	1. Get op
	2. Check if stack has +-.
	3. If yes, pop number = b, pop another number = a, a op b = c, push c.
	4. Push op onto operator stack
}

if ( pos = expression.find_first_of("(",0) > 0)
{
	1. Get line
	2. Push onto output stack
}

if( pos = expression.find_first_of(")",0) >0 )
{
	1. While the top of the operator stack is not "(", pop off one op
	2. pop number = b, pop another number = a, a op b = c, push c.
	3. Loop until reaching "(", and discard.
	

}



	